# -*- coding: utf-8 -*-
##########################################################################################
################################ Base64 encoded resources ################################
##########################################################################################
pics_512x64 = ""
##########################################################################################
MobileEd = "ICAjIyMgICANCiAgIy4jICAgDQogICMgIyMjIw0KIyMjJCAkLiMNCiMuICRAIyMjDQojIyMjJCMgIA0KICAgIy4jICANCiAgICMjIyAgDQoNCiMjIyMjICAgIA0KIyAgQCMgICAgDQojICQkIyAjIyMNCiMgJCAjICMuIw0KIyMjICMjIy4jDQogIyMgICAgLiMNCiAjICAgIyAgIw0KICMgICAjIyMjDQogIyMjIyMgICANCg0KICMjIyMgDQojIyAgIyANCiMgQCQjIA0KIyMkICMjDQojIyAkICMNCiMuJCAgIw0KIy4uKi4jDQojIyMjIyMNCg0KICMjIyMgICANCiAjQCAjIyMgDQogIyAkICAjIA0KIyMjICMgIyMNCiMuIyAjICAjDQojLiQgICMgIw0KIy4gICAkICMNCiMjIyMjIyMjDQoNCiAgIyMjIyMjDQogICMgICAgIw0KIyMjJCQkICMNCiNAICQuLiAjDQojICQuLi4jIw0KIyMjIyAgIyANCiAgICMjIyMgDQoNCiAgIyMjIyMgDQojIyMgIEAjIA0KIyAgJC4gIyMNCiMgIC4kLiAjDQojIyMgKiQgIw0KICAjICAgIyMNCiAgIyMjIyMgDQoNCiAgIyMjIyAgDQogICMuLiMgIA0KICMjIC4jIyANCiAjICAkLiMgDQojIyAkICAjIw0KIyAgIyQkICMNCiMgIEAgICAjDQojIyMjIyMjIw0KDQojIyMjIyMjIw0KIyAgIyAgICMNCiMgJC4uJCAjDQojQCQuKiAjIw0KIyAkLi4kICMNCiMgICMgICAjDQojIyMjIyMjIw0KDQojIyMjIyMgICANCiMgICAgIyAgIA0KIyAkJCQjIyAgDQojICAjLi4jIyMNCiMjICAuLiQgIw0KICMgQCAgICAjDQogIyMjIyMjIyMNCg0KIyMjIyMjIw0KIy4uJC4uIw0KIy4uIy4uIw0KIyAkJCQgIw0KIyAgJCAgIw0KIyAkJCQgIw0KIyAgI0AgIw0KIyMjIyMjIw0KDQogIyMjIyMgIA0KICMgQCAjIyMNCiMjICMkICAjDQojICouIC4gIw0KIyAgJCQgIyMNCiMjIyAjLiMgDQogICMgICAjIA0KICAjIyMjIyANCg0KIyMjIyMjDQojICAgICMNCiMgJCBAIw0KIyMqICAjDQojICogIyMNCiMgKiAjIA0KIyAqICMgDQojIC4gIyANCiMjIyMjIA0KDQogICMjIyMgDQogICMgICMgDQojIyMkICMjDQojICAqIEAjDQojICAqICAjDQojICAqICMjDQojIyMqICMgDQogICMuIyMgDQogICMjIyAgDQoNCiMjIyMjICAgIA0KIyAgICMjIyMjDQojICMgIyAgICMNCiMgJCAgICQgIw0KIy4uIyQjJCMjDQojLkAkICAgIyANCiMuLiAgIyMjIA0KIyMjIyMjICAgDQoNCiAjIyMjIyMgDQogIyAgICAjIw0KIyMuIyMkICMNCiMgLi4kICAjDQojICAjJCAgIw0KIyAgQCAjIyMNCiMjIyMjIyAg"
ORIGINAL = ""
##########################################################################################
import pygame # pip install pygame
import os
import copy
import time
import base64
import re
import pickle
from io import BytesIO

import ctypes
try: # windows stuff
    hwnd = ctypes.windll.kernel32.GetConsoleWindow()
    ctypes.windll.user32.ShowWindow(hwnd, 0)
except: pass

try:    # python 3
    import tkinter as tk
except: # python 2
    import Tkinter as tk

# pygame.init()
pygame.display.init()
pygame.font.init()
pygame.display.set_caption("Sokoban")
font = pygame.font.SysFont('Comic Sans MS', 24, bold=True)
infofont = pygame.font.SysFont('Courier', 16, bold=True)
donefont = pygame.font.SysFont('Comic Sans MS', 80, bold=True)      

def getDispRes():
    root = tk.Tk()
    root.update_idletasks()
    root.attributes('-fullscreen', True)
    root.state('iconic')
    winfo_string = root.winfo_geometry()
    root.destroy()
    return list(map(int, winfo_string.split('+', 1)[0].split('x', 1))) # width, height

bFullScreen = False
initWndSize = (576,576)
wndSize = None
screen = pygame.display.set_mode(initWndSize)
def switchDispMode():
    global bFullScreen
    global wndSize
    global screen
    bFullScreen = not bFullScreen
    if bFullScreen:
        pygame.mouse.set_visible(False)
        wndSize = getDispRes()
        screen = pygame.display.set_mode(wndSize, pygame.FULLSCREEN)
    else:
        pygame.mouse.set_visible(True)
        wndSize = initWndSize
        screen = pygame.display.set_mode(wndSize)
    try: draw()
    except: pass
switchDispMode()

_keys = [
    "_", # 0 - floor
    "#", # 1 - wall
    ".", # 2 - target
    "$", # 3 - box
    "*", # 4 - box on target
    "@", # 5 - player
    "+", # 6 - player on target
    " ", # 7 - background
    ]

info = u"""
next/prev set       - Num+/Num-
next/prev level     - PgUp/PgDn
reset level         - Delete
move                - Arrows
undo                - Spacebar
save/load           - F5/F9
fullscreen/window   - Tab
toggle background   - Num Period
hide/show info      - Num Enter
quit                - Esc
"""
longInfo = ""
for line in info.splitlines():
    longInfo = (longInfo,line)[len(line)>len(longInfo)]

path = os.path.dirname(os.path.abspath(__file__))
try:
    full_image = pygame.image.load(os.path.join(path, 'pics.png')).convert_alpha()
except:
    full_image = pygame.image.load(BytesIO(base64.b64decode(pics_512x64))).convert_alpha()

sets = []
sets.append(('MobileEd', MobileEd))
sets.append(('ORIGINAL', ORIGINAL))

lvl = []
lvls = []
history = []
setName = ""
bNextLevel = False
delay = 0.18
bSolidBG = True
bInfo = True

SaveLoadMsgDuration = 1.5
saveTick = time.time()
loadTick = time.time()

EndOfLevelMsgDuration = 3
doneTick = time.time()
pageTick = time.time()

moveDuration = delay

items=[]
def findFloor(lvl,row,col):
    global items
    if lvl[row][col]==_keys[7]:
        lvl[row][col]=_keys[0]
    else: items[row][col]=True

    neighbours = [
        [row+1,col],
        [row-1,col],
        [row,col+1],
        [row,col-1],
    ]
    for neighbour in neighbours:
        try:
            row = neighbour[0]
            col = neighbour[1]
            if not (
                lvl[row][col] == _keys[0] or
                lvl[row][col] == _keys[1] or
                items[row][col]
                ): findFloor(lvl,row,col)
        except: pass


def normalizeLvl(lvl):
    cols = 0
    rows = len(lvl)
    for i in range (rows):
        l = len(lvl[i])
        cols = (cols,l) [l>cols]

    for row in range (rows):
        diff = cols-len(lvl[row])
        lvl[row].extend([_keys[7]]*diff)

    global items
    items = [[False for x in range(cols)] for x in range(rows)]
    findFloor(lvl,*getPlayerPos(lvl))


def loadSet(data):
    global lvls
    lvls = []
    level = []
    while True:
        line = data.readline().decode('utf-8')
        if not line:
            if len(level):
                normalizeLvl(level)
                lvls.append(copy.deepcopy(level))
            break
        if line.strip() == "":
            if len(level):
                normalizeLvl(level)
                lvls.append(copy.deepcopy(level))
            level = []
        else:
            while re.search(r'(\r\n|\r|\n)', line): line = line[:-1]
            level.append(list(line))


def draw():
    cols = len(lvl[0])
    rows = len(lvl)

    imgSize = min(wndSize[0] // cols, wndSize[1] // rows)
    offsetX = int((wndSize[0] - cols * imgSize)/2)
    offsetY = int((wndSize[1] - rows * imgSize)/2)

    images = {}
    iconSize = full_image.get_height()
    i = 0
    for key in _keys:
        clipped_surface = full_image.subsurface(pygame.Rect(iconSize * i, 0, iconSize, iconSize))
        images[key] = pygame.transform.scale(clipped_surface, (imgSize,imgSize))
        i += 1

    BGColor1    = (160, 115,  50)
    floorColor1 = ( 83, 168, 196)
    BGColor2    = ( 10,  60,   0)
    floorColor2 = ( 70, 150, 115)

    BGSurface = pygame.Surface((imgSize, imgSize))
    if bSolidBG:
        screen.fill(floorColor1)
        BGSurface.fill(BGColor1)
        images[_keys[7]] = BGSurface
    else:
        screen.fill(floorColor2)
        BGSurface.fill(BGColor2)
        BGSurface.blit(images[_keys[7]],(0,0))
        images[_keys[7]] = BGSurface

    # background left/right
    posXL = offsetX - (offsetX // imgSize * imgSize)
    posXR = offsetX + (cols * imgSize)
    for row in range (rows):
        for col in range (int(offsetX / imgSize)):
            screen.blit(images[_keys[7]], (posXL+col*imgSize, offsetY+row*imgSize))
            screen.blit(images[_keys[7]], (posXR+col*imgSize, offsetY+row*imgSize))

    # background top/bottom
    posYT = offsetY - (offsetY // imgSize * imgSize)
    posYB = offsetY + (rows * imgSize)
    for row in range (int(offsetY / imgSize)):
        for col in range (int(wndSize[0] / imgSize)):
            screen.blit(images[_keys[7]], (posXL+col*imgSize, posYT+row*imgSize))
            screen.blit(images[_keys[7]], (posXL+col*imgSize, posYB+row*imgSize))

    # background molding
    screen.fill((BGColor2,BGColor1)[bSolidBG], (0, 0, posXL, wndSize[1]))
    screen.fill((BGColor2,BGColor1)[bSolidBG], (wndSize[0]-posXL-1, 0, posXL+1, wndSize[1]))
    screen.fill((BGColor2,BGColor1)[bSolidBG], (0, 0, wndSize[0], posYT))
    screen.fill((BGColor2,BGColor1)[bSolidBG], (0, wndSize[1]-posYT-1, wndSize[0], posYT+1))

    pRow, pCol = getPlayerPos(lvl)
    for row in range (rows):
        for col in range (cols):
            bBoxAnim = boxDest and boxDest[:2]==[row,col]
            if   lvl[row][col]==_keys[3] and bBoxAnim: img = images[_keys[0]]
            elif lvl[row][col]==_keys[4] and bBoxAnim: img = images[_keys[2]]
            elif lvl[row][col]==_keys[5]: img = images[_keys[0]]
            elif lvl[row][col]==_keys[6]: img = images[_keys[2]]
            else: img = images[lvl[row][col]]
            screen.blit(img, (offsetX+col*imgSize, offsetY+row*imgSize))

    # player anim
    ratio = (moveTick - time.time()) / moveDuration
    ratio = (ratio,0)[ratio<0.05]
    Forth = imgSize * moveDir[0] * ratio
    Right = imgSize * moveDir[1] * ratio
    screen.blit(images[_keys[5]], (offsetX+pCol*imgSize-Right, offsetY+pRow*imgSize-Forth))

    # box anim
    if boxDest:
        bRow, bCol, boxType = boxDest
        Forth = imgSize * moveDir[0] * ratio
        Right = imgSize * moveDir[1] * ratio
        screen.blit(images[boxType], (offsetX+bCol*imgSize-Right, offsetY+bRow*imgSize-Forth))

    widthSET, heightSET = font.size(setName)
    pos = (32, 16)
    text_surface = font.render(setName, True, (255, 160, 0))
    screen.blit(text_surface, pos)

    LVL = "%d/%d" % (lvlIdx+1,len(lvls))
    widthLVL, heightLVL = font.size(LVL)
    text_surface = font.render(LVL, True, (255, 255, 100))
    pos = (32+widthSET+8, 16)
    screen.blit(text_surface, pos)

    if saveTick > time.time():
        ratio = (saveTick - time.time())/SaveLoadMsgDuration
        text_surface = font.render(u"Saved", True, (255, 230, 128))
        text_surface.set_alpha(int(255*ratio))
        pos = (32, 16 + heightSET * (1 + (1 - ratio)))
        screen.blit(text_surface, pos)

    if loadTick > time.time():
        ratio = (loadTick - time.time())/SaveLoadMsgDuration
        text_surface = font.render(u"Loaded", True, (255, 230, 128))
        text_surface.set_alpha(int(255*ratio))
        pos = (32, 16 + heightSET * (1 + (1 - ratio)))
        screen.blit(text_surface, pos)

    if doneTick > time.time():
        ratio = ((doneTick-EndOfLevelMsgDuration*0.25) - time.time())/EndOfLevelMsgDuration
        text_surface = donefont.render(u"Solved", True, (255, 255, 100))
        text_rect = text_surface.get_rect()
        text_rect.center = (wndSize[0]*0.5, wndSize[1]*0.25 + donefont.get_linesize() * 3 * (1 - ratio))
        text_surface.set_alpha(int(255*ratio))
        screen.blit(text_surface, text_rect)

    if bInfo:
        infoWidth, infoHeight = infofont.size(longInfo)
        x_pos = wndSize[0] - infoWidth - 20
        y_offset = 0
        line_height = infofont.get_linesize()
        for line in info.splitlines():
            text_surface = infofont.render(line, True, (255, 255, 192))
            screen.blit(text_surface, (x_pos, y_offset))
            y_offset += line_height

    pygame.display.flip()


def save():
    global saveTick
    data = [sets,setIdx,setName,history,lvlIdx,lvls,lvl]
    try:
        with open(os.path.join(path, 'Sokoban.sav'), 'wb') as file:
            pickle.dump(data, file)
        saveTick = time.time() + SaveLoadMsgDuration
    except: pass


def load():
    global loadTick
    global moveTick
    global backTick
    global bNextLevel
    global sets
    global setIdx
    global setName
    global history
    global lvlIdx
    global lvls
    global lvl
    try:
        with open(os.path.join(path, 'Sokoban.sav'), 'rb') as file:
            data = pickle.load(file)
        bNextLevel = False
        global boxDest; boxDest = None
        moveTick = time.time()
        backTick = time.time()
        sets    = data[0]
        setIdx  = data[1]
        setName = data[2]
        history = data[3]
        lvlIdx  = data[4]
        lvls    = data[5]
        lvl     = data[6]
        loadTick = time.time() + SaveLoadMsgDuration
    except: pass


def getGameState():
    boxes = []
    for row in range (len(lvl)):
        for col in range (len(lvl[row])):
            if lvl[row][col] == _keys[3] or lvl[row][col] == _keys[4]:
                boxes.append([row,col])
    return boxes


backTick = time.time()
def stepBack():
    global backTick
    global lvl
    try:
        lvl = history.pop()
        global boxDest; boxDest = None
        global input; input = [0,0,0,0]
        global moveDir; moveDir = [0,0]
        global across; across = None
        draw()
        backTick = time.time()
    except: pass


def getPlayerPos(lvl):
    for row in range (len(lvl)):
        for col in range (len(lvl[row])):
            if lvl[row][col] == _keys[5] or lvl[row][col] == _keys[6]:
                return row, col
    return 0, 0


def isSolved():
    for row in range (len(lvl)):
        for col in range (len(lvl[row])):
            if lvl[row][col] == _keys[3]: return False
    global input     ; input = [0,0,0,0]
    global moveDir   ; moveDir = [0,0]
    global history   ; history = []
    global bNextLevel; bNextLevel = True
    global moveTick  ; moveTick = time.time() + 1.5 # delay advancement to the next level
    global doneTick  ; doneTick = time.time() + EndOfLevelMsgDuration    
    return True


def updateSets():
    global sets
    dir = os.path.join(path, 'lvl')
    try:
        for filename in os.listdir(dir):
            if filename.endswith('.txt') and os.path.isfile(os.path.join(dir, filename)):
                with open(os.path.join(dir, filename), "rb") as file:
                    setName = os.path.basename(filename).split('.', 1)[0]
                    data = base64.b64encode(file.read()).decode('utf-8')
                    sets.append((setName, data))
    except: pass


setIdx = -1
def nextSet(val):
    global bNextLevel; bNextLevel = False
    global boxDest; boxDest = None
    global input; input = [0,0,0,0]
    global moveDir; moveDir = [0,0]
    global across; across = None
    global moveTick; moveTick = time.time()
    global setIdx
    setIdx += val
    setIdx = max(0, min(setIdx, len(sets)-1)) # clamp
    global lvlIdx
    lvlIdx = -1
    global setName
    global lvls
    if len(sets):
        setName = sets[setIdx][0]
        data = BytesIO(base64.b64decode(sets[setIdx][1]))
        loadSet(data)
    else:
        setName = "DUMMY"
        lvls = []
        lvls.append([
            list('#####'),
            list('#.$@#'),
            list('#####'),
            ])
    nextLvl(1)


lvlIdx = -1
def nextLvl(val):
    global bNextLevel; bNextLevel = False
    global boxDest; boxDest = None
    global input; input = [0,0,0,0]
    global moveDir; moveDir = [0,0]
    global across; across = None
    global moveTick; moveTick = time.time()
    global backTick; backTick = time.time()
    global pageTick; pageTick = time.time()
    global history
    global lvlIdx
    global lvls
    global lvl
    lvlIdx += val
    if lvlIdx >= len(lvls): lvlIdx = 0
    if lvlIdx < 0: lvlIdx = len(lvls)-1
    lvl = copy.deepcopy(lvls[lvlIdx])
    history = []
    draw()


input = [0,0,0,0]
boxDest = None
moveDir = [0,0]
moveTick = time.time()
across = None
def move(Forth, Right):
    global moveDir
    global across ; across = None

    if isSolved(): return
    if not any(x for x in [Forth, Right]): return

    if all(x for x in [Forth, Right]):
        if any(x for x in moveDir):
            if   moveDir[0]: across = (Forth,0); Forth = 0
            elif moveDir[1]: across = (0,Right); Right = 0
        else: across = (0,Right); Right = 0
    moveDir = [Forth, Right]

    global lvl
    oldlvl = copy.deepcopy(lvl)
    state = getGameState()

    row, col = getPlayerPos(lvl)

    curr = (_keys[0],_keys[2])[lvl[row][col]==_keys[6]]
    next = lvl[row+Forth][col+Right]

    global boxDest
    BoxType = None
    boxDest = None

    if   next == _keys[0]:
            lvl[row][col] = curr
            lvl[row+Forth][col+Right] = _keys[5]
    elif next == _keys[2]:
            lvl[row][col] = curr
            lvl[row+Forth][col+Right] = _keys[6]
    elif next == _keys[3]:
        if lvl[row+Forth*2][col+Right*2] == _keys[0]:
            lvl[row][col] = curr
            lvl[row+Forth][col+Right] = _keys[5]
            lvl[row+Forth*2][col+Right*2] = _keys[3]; BoxType = _keys[3]
        if lvl[row+Forth*2][col+Right*2] == _keys[2]:
            lvl[row][col] = curr
            lvl[row+Forth][col+Right] = _keys[5]
            lvl[row+Forth*2][col+Right*2] = _keys[4]; BoxType = _keys[4]
    elif next == _keys[4]:
        if lvl[row+Forth*2][col+Right*2] == _keys[0]:
            lvl[row][col] = curr
            lvl[row+Forth][col+Right] = _keys[6]
            lvl[row+Forth*2][col+Right*2] = _keys[3]; BoxType = _keys[3]
        if lvl[row+Forth*2][col+Right*2] == _keys[2]:
            lvl[row][col] = curr
            lvl[row+Forth][col+Right] = _keys[6]
            lvl[row+Forth*2][col+Right*2] = _keys[4]; BoxType = _keys[4]

    global history
    if state != getGameState(): history.append(oldlvl)

    global moveTick
    if lvl[row][col] != curr: # hit a roadblock
        if across: move(*across)
    else:
        if BoxType: boxDest = [row+Forth*2,col+Right*2,BoxType]
        moveTick = time.time() + moveDuration


##########################################################################################
updateSets()
nextSet(1)
running = True
while running:
    if (saveTick > time.time() or
        loadTick > time.time() or
        doneTick > time.time() or
        moveTick > time.time()):
        draw()

    if time.time() > moveTick:
        if bNextLevel: nextLvl(1)
        else:
            if  (across and
                (across[0] and across[0]==input[1]-input[0] or
                 across[1] and across[1]==input[2]-input[3])
                ): move(*across)
            else: move(input[1]-input[0],input[2]-input[3])

    keys = pygame.key.get_pressed()
    if keys[pygame.K_SPACE]    and (time.time() - backTick) > delay*2.0: stepBack( )
    if keys[pygame.K_PAGEUP]   and (time.time() - pageTick) > delay*1.5: nextLvl( 1)
    if keys[pygame.K_PAGEDOWN] and (time.time() - pageTick) > delay*1.5: nextLvl(-1)

    for event in pygame.event.get():
        if event.type == pygame.QUIT: running = False
        elif event.type == pygame.KEYUP:

            if   event.key == pygame.K_UP:    input[0] = 0
            elif event.key == pygame.K_DOWN:  input[1] = 0
            elif event.key == pygame.K_RIGHT: input[2] = 0
            elif event.key == pygame.K_LEFT:  input[3] = 0

        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE: running = False

            elif event.key == pygame.K_UP:    input[0] = 1
            elif event.key == pygame.K_DOWN:  input[1] = 1
            elif event.key == pygame.K_RIGHT: input[2] = 1
            elif event.key == pygame.K_LEFT:  input[3] = 1

            elif event.key == pygame.K_KP_PLUS:  nextSet( 1)
            elif event.key == pygame.K_KP_MINUS: nextSet(-1)
            elif event.key == pygame.K_DELETE:   nextLvl( 0)
            elif event.key == pygame.K_PAGEUP:   nextLvl( 1)
            elif event.key == pygame.K_PAGEDOWN: nextLvl(-1)
            elif event.key == pygame.K_SPACE: stepBack()
            elif event.key == pygame.K_KP_PERIOD:
                bSolidBG = not bSolidBG
                draw()
            elif event.key == pygame.K_KP_ENTER:
                bInfo = not bInfo
                draw()
            elif event.key == pygame.K_F5: save()
            elif event.key == pygame.K_F9: load()
            elif event.key == pygame.K_TAB: switchDispMode()

pygame.quit()
##########################################################################################